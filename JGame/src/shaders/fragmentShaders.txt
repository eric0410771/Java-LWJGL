#version 400 core

in vec2 pass_textureCoords;

in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDemper;
uniform float reflectivity;
uniform vec3 skycolor;

void main(void){
	vec3 normal = normalize(surfaceNormal);
	vec3 tlv = normalize(toLightVector);
	
	float ndot = dot(normal,tlv);
	float brightness = max(ndot,0.2f);
	vec3 diffuse = brightness*lightColour;
	
	vec3 unitofTCV = normalize(toCameraVector);
	
	float ntdot = dot(normal,tlv);
	
	tlv -=(ntdot)*2*normal;
	
	float specularFactor = dot(tlv,unitofTCV);
	
	specularFactor = max(specularFactor,0.0);
	
	float demperSpecular = pow(specularFactor,shineDemper);
	vec3 finalLightColour = demperSpecular*lightColour;
	
	vec4 textureColour = texture(textureSampler,pass_textureCoords);
	if(textureColour.a<0.5)
	{
		discard;
	}
	vec4 colorwithdistance = mix(vec4(skycolor,1.0),vec4(diffuse,1.0)*textureColour+vec4(finalLightColour,1.0),visibility);
	out_Color = colorwithdistance;
	
}