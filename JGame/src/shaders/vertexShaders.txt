#version 150

in vec3 position;

in vec2 textureCoords;

in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float fakelight;

const float density = 0.0020;
const float gradient = 5.0;

void main(void){
	vec4 worldPosition = transformationMatrix*vec4(position,1.0);
	vec4 positionRelativeToCamera = viewMatrix*worldPosition;
	
	gl_Position = projectionMatrix*positionRelativeToCamera;
	
	pass_textureCoords = textureCoords;
	toLightVector =  worldPosition.xyz-lightPosition;
	
	vec3 actualNormal = normal;
	if(fakelight>0.5)
		actualNormal = vec3(0,1.0,0);
		
	float length = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow(density*length,gradient));
	visibility = clamp(visibility,0.01,1);
	surfaceNormal = (transformationMatrix*vec4(actualNormal,0.0)).xyz;
	toCameraVector = (inverse(viewMatrix)*vec4(0,0,0,1.0)).xyz-worldPosition.xyz;
}